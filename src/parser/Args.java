

package parser;

import parser.PositionalArg;
import parser.TokenArg;

/**
 * Define valid command line arguments here
 */
final class Args {
    static final String[] HELP_SWITCH = {"-h", "--help"};
    
    // used {c, d, f, h i, o, Pp, q, r, Vv}
    static final TokenArg[] TOKEN_LIST = {
        new TokenArg("clk_net", new String[]{"-c", "--clk_net"},
                new String[]{"clk_net"}, new boolean[]{true},
                "The net connecting to the clock. Default: 'clk_100MHz'."),
        new TokenArg("refresh", new String[]{"-r", "--refresh"},
                "Force recompilation from input dcp. Ignore any intermediate designs."),
        new TokenArg("force", new String[]{"-f", "--force"},
                "Force overwrite of output files (intermediate files in .iii are always overwritten)."),
        new TokenArg("quiet", new String[]{"-q", "--quiet"},
                "Display less progress information. Run Vivado tcl commands with '-quiet' flag."),
        new TokenArg("verbose", new String[]{"-v", "--verbose"},
                "Display extra progress information (ignored if also quiet)."),
        new TokenArg("extra_verbose", new String[]{"-V", "--extra_verbose"},
                "Display extra progress information (ignored if also quiet). Run Vivado tcl commands with '-verbose' flag."),
        new TokenArg("help", HELP_SWITCH,
                "Print this help message and exit.")
    };
    static final PositionalArg[] POSITIONAL_ARGS = {
        new PositionalArg("input_dcp", true,
                "Original design checkpoint file generated by Vivado in '<project_name>.runs/impl_1/<design_name>_wrapper_routed.dcp'."),
        new PositionalArg("output_dcp", true,
                "Name to give final output design.")
    };
}